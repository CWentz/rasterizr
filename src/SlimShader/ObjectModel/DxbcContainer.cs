using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SlimShader.ObjectModel
{
	public class DxbcContainer
	{
		public DxbcContainerHeader Header { get; internal set; }
		public List<DxbcChunk> Chunks { get; private set; }

		public DxbcContainer()
		{
			Chunks = new List<DxbcChunk>();
		}

		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.AppendLine("// ");
			sb.AppendLine("// Generated by Shaderflect " + GetType().Assembly.GetName().Version);
			sb.AppendLine("// ");
			sb.AppendLine("// ");
			sb.AppendLine("// ");

			// TODO: Remove these hardcoded lines once we have the proper reflected values.

			sb.AppendLine(@"//
//
// Buffer Definitions: 
//
// cbuffer cbuf0
// {
//
//   float4 cool;                       // Offset:    0 Size:    16
//   int4 zeek;                         // Offset:   16 Size:    16
//   int2 arr[127];                     // Offset:   32 Size:  2024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samp0                             sampler      NA          NA    0        1
// samp1                             sampler      NA          NA    1        1
// tex0                              texture  float4          2d    0        1
// tex1                              texture  float4        cube    1        1
// tex2                              texture  float4          3d    2        1
// tex3                              texture  float4       2dMS2    3        1
// tex4                              texture  float4          2d    4        2
// cbuf0                             cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// TEXCOORD                 0   xyzw        0     NONE  float   xyzw
// TEXCOORD                 1   xyzw        1     NONE  float   x   
// SV_POSITION              0   xyzw        2      POS  float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//");

			var shaderProgramChunk = Chunks.FirstOrDefault(x => x.Content is ShaderProgram);
			if (shaderProgramChunk != null)
				sb.Append(shaderProgramChunk);

			return sb.ToString();
		}
	}
}