using System.Collections.Generic;
using System.Linq;
using System.Text;
using SlimShader.Chunks.Pcsg;
using SlimShader.Chunks.Stat;
using SlimShader.IO;
using SlimShader.InputOutputSignature;
using SlimShader.Interface;
using SlimShader.ResourceDefinition;
using SlimShader.Shader;
using SlimShader.Util;

namespace SlimShader
{
	public class DxbcContainer
	{
		public DxbcContainerHeader Header { get; private set; }
		public List<DxbcChunk> Chunks { get; private set; }

		public ResourceDefinitionChunk ResourceDefinition
		{
			get { return Chunks.OfType<ResourceDefinitionChunk>().SingleOrDefault(); }
		}

		public PatchConstantSignatureChunk PatchConstantSignature
		{
			get { return Chunks.OfType<PatchConstantSignatureChunk>().SingleOrDefault(); }
		}

		public InputSignatureChunk InputSignature
		{
			get { return Chunks.OfType<InputSignatureChunk>().SingleOrDefault(); }
		}

		public OutputSignatureChunk OutputSignature
		{
			get { return Chunks.OfType<OutputSignatureChunk>().SingleOrDefault(); }
		}

		public ShaderProgramChunk Shader
		{
			get { return Chunks.OfType<ShaderProgramChunk>().SingleOrDefault(); }
		}

		public StatisticsChunk Statistics
		{
			get { return Chunks.OfType<StatisticsChunk>().SingleOrDefault(); }
		}

		public InterfacesChunk Interfaces
		{
			get { return Chunks.OfType<InterfacesChunk>().SingleOrDefault(); }
		}

		public DxbcContainer()
		{
			Chunks = new List<DxbcChunk>();
		}

		public static DxbcContainer Parse(BytecodeReader reader)
		{
			var container = new DxbcContainer();

			uint fourCc = reader.ReadUInt32();
			if (fourCc != "DXBC".ToFourCc())
				throw new ParseException("Invalid FourCC");

			var uniqueKey = new uint[4];
			uniqueKey[0] = reader.ReadUInt32();
			uniqueKey[1] = reader.ReadUInt32();
			uniqueKey[2] = reader.ReadUInt32();
			uniqueKey[3] = reader.ReadUInt32();

			container.Header = new DxbcContainerHeader
			{
				FourCc = fourCc,
				UniqueKey = uniqueKey,
				One = reader.ReadUInt32(),
				TotalSize = reader.ReadUInt32(),
				ChunkCount = reader.ReadUInt32()
			};

			for (uint i = 0; i < container.Header.ChunkCount; i++)
			{
				uint chunkOffset = reader.ReadUInt32();
				var chunkReader = reader.CopyAtOffset((int) chunkOffset);
				container.Chunks.Add(DxbcChunk.ParseChunk(chunkReader, container));
			}

			return container;
		}

		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.AppendLine("// ");
			sb.AppendLine("// Generated by Shaderflect " + GetType().Assembly.GetName().Version);
			sb.AppendLine("// ");
			sb.AppendLine("// ");
			sb.AppendLine("// ");

			sb.AppendLine("//");
			sb.AppendLine("//");

			if (ResourceDefinition != null)
				sb.Append(ResourceDefinition);

			sb.AppendLine(@"//");

			if (PatchConstantSignature != null)
			{
				sb.Append(PatchConstantSignature);
				sb.AppendLine(@"//");
				sb.AppendLine(@"//");
			}

			sb.Append(InputSignature);
			sb.AppendLine(@"//");
			sb.AppendLine(@"//");

			sb.Append(OutputSignature);
			sb.AppendLine(@"//");

			if (Statistics != null)
				sb.Append(Statistics);

			if (Interfaces != null)
				sb.Append(Interfaces);

			if (Shader != null)
				sb.Append(Shader);

			sb.AppendFormat("// Approximately {0} instruction slots used", Statistics.InstructionCount);

			return sb.ToString();
		}
	}
}