//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /Od /T ps_4_0 test.hlsl /Fo test.bin /Fc test.txt
//
//
// Buffer Definitions: 
//
// cbuffer cbuf0
// {
//
//   float4 cool;                       // Offset:    0 Size:    16
//   int4 zeek;                         // Offset:   16 Size:    16
//   int2 arr[127];                     // Offset:   32 Size:  2024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samp0                             sampler      NA          NA    0        1
// samp1                             sampler      NA          NA    1        1
// tex0                              texture  float4          2d    0        1
// tex1                              texture  float4        cube    1        1
// tex2                              texture  float4          3d    2        1
// tex3                              texture  float4       2dMS2    3        1
// tex4                              texture  float4          2d    4        2
// cbuf0                             cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// TEXCOORD                 0   xyzw        0     NONE  float   xyzw
// TEXCOORD                 1   xyzw        1     NONE  float   x   
// SV_POSITION              0   xyzw        2      POS  float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[129], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2dms(2) (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v0.xyzw
dcl_input_ps linear centroid v1.x
dcl_input_ps_siv linear noperspective v2.x, position
dcl_output o0.xyzw
dcl_temps 11
dcl_indexableTemp x0[8], 4
dcl_indexableTemp x1[4], 4
dcl_indexableTemp x2[4], 4
ftou r0.x, v2.x
utof r0.x, r0.x
dp4 r0.y, v0.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000)
add r0.x, r0.y, r0.x
add r0.x, r0.x, v1.x
xor r0.y, cb0[1].y, l(2)
itof r0.y, r0.y
add r0.x, r0.y, r0.x
mov r0.y, l(0)
mov r0.z, r0.x
mov r0.w, r0.y
loop 
  ilt r1.x, r0.w, l(10)
  breakc_z r1.x
  itof r1.x, r0.w
  add r1.y, r1.x, l(1.001000)
  div r1.y, l(1.000000), r1.y
  mul r1.x, r1.y, r1.x
  sqrt r1.y, r0.z
  add r1.x, r1.y, r1.x
  add r1.x, r0.z, r1.x
  lt r1.y, r1.x, l(0.000000)
  if_nz r1.y
    mov r0.z, r1.x
    break 
  endif 
  iadd r0.w, r0.w, l(1)
  mov r0.z, r1.x
endloop 
ftoi r0.x, r0.z
ilt r1.x, r0.x, l(0)
if_nz r1.x
  xor r1.x, r0.x, l(50)
else 
  ilt r1.y, l(5), r0.x
  if_nz r1.y
    and r1.x, r0.x, l(2222)
  else 
    iadd r1.x, r0.x, -cb0[r0.x + 2].x
  endif 
endif 
add r0.x, cb0[0].y, cb0[0].x
add r0.x, r0.x, cb0[0].z
add r0.x, r0.x, cb0[0].w
add r0.x, r0.x, r0.z
sample r2.xyzw, l(0.125000, 5.000000, 0.000000, 0.000000), t0.xyzw, s0
add r0.x, r0.x, r2.x
sample r2.xyzw, l(0.777000, 1234.500000, 0.000000, 0.000000), t0.xyzw, s1
add r0.x, r0.x, r2.x
sample r2.xyzw, l(0.125000, 5.000000, 1.000000, 0.000000), t1.xyzw, s0
add r0.x, r0.x, r2.x
sample r2.xyzw, l(0.125000, 5.000000, 1.000000, 0.000000), t2.xyzw, s0
add r0.x, r0.x, r2.z
ldms(1,1,0) r2.xyzw, l(0, 5, 0, 0), t3.xyzw, l(0)
add r2.x, r0.x, r2.x
div r2.y, l(1.000000), r2.x
sample_b r3.xyzw, r2.xyxx, t0.xyzw, s0, l(-15.000000)
add r0.x, r2.x, r3.y
sample r2.xyzw, l(0.000000, 5.000000, 0.000000, 0.000000), t4.xyzw, s0
add r0.x, r0.x, r2.z
sample r2.xyzw, l(0.000000, 5.000000, 0.000000, 0.000000), t5.xyzw, s0
add r0.x, r0.x, r2.z
itof r0.z, r1.x
mov x1[3].x, r0.z
mov x2[2].x, r0.z
mov x1[2].x, r0.x
mov x2[1].x, r0.x
and r0.z, r1.x, l(0x00087e85)
itof r1.x, r0.z
mov x0[0].x, r1.x
mov x2[0].x, r1.x
iadd r0.z, r0.z, l(42)
itof r1.y, r0.z
mov x0[1].x, r1.y
mov x2[3].x, r1.y
ishr r0.z, r0.z, l(76)
itof r1.y, r0.z
mov x1[1].x, r1.y
mov x0[2].x, r1.y
ishl r0.z, r0.z, l(22)
mov r0.z, r0.z
xor r1.y, r0.z, r0.z
utof r1.z, r1.y
mov x0[3].x, r1.z
mov x1[0].x, r1.z
ushr r1.y, r1.y, l(3)
utof r1.z, r1.y
mov x0[4].x, r1.z
ishl r1.y, r1.y, l(2)
utof r1.z, r1.y
mov x0[5].x, r1.z
mov r1.z, cb0[r1.y + 2].x
xor r1.y, r1.z, r1.y
utof r1.z, r1.y
mov x0[6].x, r1.z
and r1.z, r1.y, l(127)
mov r1.z, cb0[r1.z + 2].x
and r1.y, r1.z, r1.y
utof r1.z, r1.y
iadd r1.w, r1.y, l(66)
iadd r2.x, r1.y, l(1)
imul null, r1.w, cb0[r1.w + 2].y, cb0[r2.x + 2].x
itof r1.w, r1.w
add r2.z, r0.x, r1.w
add r0.x, r1.z, r2.z
mov x0[7].x, r0.x
itof r0.x, r0.w
add r0.x, r1.x, r0.x
ftoi r0.x, r0.x
and r0.w, r0.x, l(7)
mov r0.w, x0[r0.w + 0].x
itof r0.z, r0.z
add r0.z, r0.w, r0.z
ftoi r0.z, r0.z
and r0.w, r0.z, l(7)
mov r1.x, x1[r0.w + 0].x
itof r0.x, r0.x
add r0.x, r1.x, r0.x
ftoi r0.x, r0.x
mov r0.w, x2[r0.w + 0].x
itof r0.x, r0.x
add r0.x, r0.w, r0.x
ftoi r0.x, r0.x
mul r3.z, r2.z, l(0.200000)
add r3.w, r1.z, l(0.500000)
itof r3.x, r0.x
itof r3.y, r0.z
utof r2.w, r1.y
itof r2.x, r0.x
itof r2.y, r0.z
mov r2.z, r2.z
mov r1.yzw, r2.yyzw
mov r1.x, r2.x
mov r0.x, r0.y
loop 
  ftoi r0.z, r1.x
  ilt r0.z, r0.x, r0.z
  breakc_z r0.z
  mov r4.zw, r1.zzzw
  mov r4.x, r1.x
  mov r4.y, r1.y
  mov r0.z, r0.y
  loop 
    ftoi r0.w, r4.y
    ilt r0.w, r0.z, r0.w
    breakc_z r0.w
    itof r5.x, r0.x
    itof r5.y, r0.z
    sample_d r5.xyzw, r5.xyxx, t0.xyzw, s0, l(1.500000, 1.500000, 0.000000, 0.000000), l(4.100000, 4.100000, 0.000000, 0.000000)
    mov r0.w, r4.x
    mov r6.y, r4.y
    mov r6.zw, r4.zzzw
    mov r7.yzw, r6.yyzw
    mov r7.x, r0.w
    mov r6.x, r0.y
    loop 
      ftoi r8.x, r7.x
      ilt r8.x, r6.x, r8.x
      breakc_z r8.x
      mov r8.zw, r7.zzzw
      mov r8.x, r7.x
      mov r8.y, r7.y
      mov r9.x, r0.y
      loop 
        ftoi r9.y, r8.y
        ilt r9.y, r9.x, r9.y
        breakc_z r9.y
        itof r10.x, r6.x
        itof r10.y, r9.x
        sample_d r10.xyzw, r10.xyxx, t0.xyzw, s0, l(1.500000, 1.500000, 0.000000, 0.000000), l(4.100000, 4.100000, 0.000000, 0.000000)
        add r8.xyzw, r10.xyzw, r8.xyzw
        iadd r9.x, r9.x, l(1)
      endloop 
      mov r7.zw, r8.zzzw
      mov r7.x, r8.x
      mov r7.y, r8.y
      iadd r6.x, r6.x, l(1)
    endloop 
    add r6.xyzw, r7.xyzw, l(1.100000, 2.200000, 3.300000, 4.400000)
    add r6.xyzw, r6.xyzw, r7.xyzw
    mul r6.xyzw, r6.xyzw, l(55566.199219, 55566.199219, 55566.199219, 55566.199219)
    mov r6.xyzw, r6.xyzw
    add r5.xyzw, r5.xyzw, r6.xyzw
    add r4.xyzw, r5.xyzw, r4.xyzw
    iadd r0.z, r0.z, l(1)
  endloop 
  mov r1.zw, r4.zzzw
  mov r1.x, r4.x
  mov r1.y, r4.y
  iadd r0.x, r0.x, l(1)
endloop 
add r0.xyzw, r1.xyzw, l(1.100000, 2.200000, 3.300000, 4.400000)
add r0.xyzw, r0.xyzw, r1.xyzw
mov r0.xyzw, r0.xyzw
add o0.xyzw, r0.xyzw, r3.xyzw
ret 
// Approximately 196 instruction slots used
