//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /T ps_5_0 /Fo DynamicShaderLinkage11_PS.o /Fc
//    DynamicShaderLinkage11_PS.asm DynamicShaderLinkage11_PS.hlsl /E PSMain
//
//
// Buffer Definitions: 
//
// interfaces $ThisPointer
// {
//
//   interface iBaseLight g_abstractAmbientLighting;// Offset:    1 Size:     1
//   interface iBaseLight g_abstractDirectLighting;// Offset:    2 Size:     1
//   interface iBaseLight g_abstractEnvironmentLighting;// Offset:    3 Size:     1
//   interface iBaseMaterial g_abstractMaterial;// Offset:    0 Size:     1
//
// }
//
// cbuffer cbPerFrame
// {
//
//   struct cAmbientLight
//   {
//       
//       float3 m_vLightColor;          // Offset:    0
//       bool m_bEnable;                // Offset:   12
//
//   } g_ambientLight;                  // Offset:    0 Size:    16
//   
//   struct cHemiAmbientLight
//   {
//       
//       struct cAmbientLight
//       {
//           
//           float3 m_vLightColor;      // Offset:   16
//           bool m_bEnable;            // Offset:   28
//
//       } $super;                      // Offset:   16
//       float4 m_vGroundColor;         // Offset:   32
//       float4 m_vDirUp;               // Offset:   48
//
//   } g_hemiAmbientLight;              // Offset:   16 Size:    48
//   
//   struct cDirectionalLight
//   {
//       
//       struct cAmbientLight
//       {
//           
//           float3 m_vLightColor;      // Offset:   64
//           bool m_bEnable;            // Offset:   76
//
//       } $super;                      // Offset:   64
//       float4 m_vLightDir;            // Offset:   80
//
//   } g_directionalLight;              // Offset:   64 Size:    32
//   
//   struct cEnvironmentLight
//   {
//       
//       struct cAmbientLight
//       {
//           
//           float3 m_vLightColor;      // Offset:   96
//           bool m_bEnable;            // Offset:  108
//
//       } $super;                      // Offset:   96
//
//   } g_environmentLight;              // Offset:   96 Size:    16
//   float4 g_vEyeDir;                  // Offset:  112 Size:    16
//
// }
//
// cbuffer cbPerPrimitive
// {
//
//   struct cPlasticMaterial
//   {
//       
//       struct cBaseMaterial
//       {
//           
//           float3 m_vColor;           // Offset:    0
//           int m_iSpecPower;          // Offset:   12
//
//       } $super;                      // Offset:    0
//
//   } g_plasticMaterial;               // Offset:    0 Size:    16
//   
//   struct cPlasticTexturedMaterial
//   {
//       
//       struct cPlasticMaterial
//       {
//           
//           struct cBaseMaterial
//           {
//               
//               float3 m_vColor;       // Offset:   16
//               int m_iSpecPower;      // Offset:   28
//
//           } $super;                  // Offset:   16
//
//       } $super;                      // Offset:   16
//
//   } g_plasticTexturedMaterial;       // Offset:   16 Size:    16
//   
//   struct cPlasticLightingOnlyMaterial
//   {
//       
//       struct cBaseMaterial
//       {
//           
//           float3 m_vColor;           // Offset:   32
//           int m_iSpecPower;          // Offset:   44
//
//       } $super;                      // Offset:   32
//
//   } g_plasticLightingOnlyMaterial;   // Offset:   32 Size:    16
//   
//   struct cRoughMaterial
//   {
//       
//       struct cBaseMaterial
//       {
//           
//           float3 m_vColor;           // Offset:   48
//           int m_iSpecPower;          // Offset:   60
//
//       } $super;                      // Offset:   48
//
//   } g_roughMaterial;                 // Offset:   48 Size:    16
//   
//   struct cRoughTexturedMaterial
//   {
//       
//       struct cRoughMaterial
//       {
//           
//           struct cBaseMaterial
//           {
//               
//               float3 m_vColor;       // Offset:   64
//               int m_iSpecPower;      // Offset:   76
//
//           } $super;                  // Offset:   64
//
//       } $super;                      // Offset:   64
//
//   } g_roughTexturedMaterial;         // Offset:   64 Size:    16
//   
//   struct cRoughLightingOnlyMaterial
//   {
//       
//       struct cRoughMaterial
//       {
//           
//           struct cBaseMaterial
//           {
//               
//               float3 m_vColor;       // Offset:   80
//               int m_iSpecPower;      // Offset:   92
//
//           } $super;                  // Offset:   80
//
//       } $super;                      // Offset:   80
//
//   } g_roughLightingOnlyMaterial;     // Offset:   80 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_samLinear                       sampler      NA          NA    0        1
// g_txDiffuse                       texture  float4          2d    0        1
// g_txEnvironmentMap                texture  float4        cube    2        1
// cbPerFrame                        cbuffer      NA          NA    0        1
// cbPerPrimitive                    cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_POSITION              0   xyzw        0      POS  float       
// NORMAL                   0   xyz         1     NONE  float   xyz 
// TEXCOORD                 0   xy          2     NONE  float   xy  
// TEXCOORD                 1   xyzw        3     NONE  float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
//
// Available Class Types:
//
// Name                             ID CB Stride Texture Sampler
// ------------------------------ ---- --------- ------- -------
// cRoughLightingOnlyMaterial        0         1       0       0
// cRoughTexturedMaterial            1         1       0       0
// cRoughMaterial                    2         1       0       0
// cPlasticLightingOnlyMaterial      3         1       0       0
// cPlasticTexturedMaterial          4         1       0       0
// cPlasticMaterial                  5         1       0       0
// cBaseMaterial                     6         1       0       0
// cEnvironmentLight                 7         1       0       0
// cSpotLight                        8         0       0       0
// cOmniLight                        9         0       0       0
// cDirectionalLight                10         2       0       0
// cHemiAmbientLight                11         3       0       0
// cAmbientLight                    12         1       0       0
//
// Available Class Instances:
//
// Name                        Type CB CB Offset Texture Sampler
// --------------------------- ---- -- --------- ------- -------
// g_ambientLight                12  0         0       -       -
// g_hemiAmbientLight            11  0         1       -       -
// g_directionalLight            10  0         4       -       -
// g_environmentLight             7  0         6       -       -
// g_plasticMaterial              5  1         0       -       -
// g_plasticTexturedMaterial      4  1         1       -       -
// g_plasticLightingOnlyMaterial    3  1         2       -       -
// g_roughMaterial                2  1         3       -       -
// g_roughTexturedMaterial        1  1         4       -       -
// g_roughLightingOnlyMaterial    0  1         5       -       -
//
// Interface slots, 4 total:
//
//             Slots
// +----------+---------+---------------------------------------
// | Type ID  |   0     |0    1    2    3    4    5    6    
// | Table ID |         |0    1    2    3    4    5    6    
// +----------+---------+---------------------------------------
// | Type ID  |   1     |7    8    9    10   11   12   
// | Table ID |         |7    8    9    10   11   12   
// +----------+---------+---------------------------------------
// | Type ID  |   2     |7    8    9    10   11   12   
// | Table ID |         |13   14   15   16   17   18   
// +----------+---------+---------------------------------------
// | Type ID  |   3     |7    8    9    10   11   12   
// | Table ID |         |19   20   21   22   23   24   
// +----------+---------+---------------------------------------
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t2
dcl_function_body fb0
dcl_function_body fb1
dcl_function_body fb2
dcl_function_body fb3
dcl_function_body fb4
dcl_function_body fb5
dcl_function_body fb6
dcl_function_body fb7
dcl_function_body fb8
dcl_function_body fb9
dcl_function_body fb10
dcl_function_body fb11
dcl_function_body fb12
dcl_function_body fb13
dcl_function_body fb14
dcl_function_body fb15
dcl_function_body fb16
dcl_function_body fb17
dcl_function_body fb18
dcl_function_body fb19
dcl_function_body fb20
dcl_function_body fb21
dcl_function_body fb22
dcl_function_body fb23
dcl_function_body fb24
dcl_function_body fb25
dcl_function_body fb26
dcl_function_body fb27
dcl_function_body fb28
dcl_function_body fb29
dcl_function_body fb30
dcl_function_body fb31
dcl_function_body fb32
dcl_function_body fb33
dcl_function_body fb34
dcl_function_body fb35
dcl_function_body fb36
dcl_function_body fb37
dcl_function_body fb38
dcl_function_body fb39
dcl_function_body fb40
dcl_function_body fb41
dcl_function_body fb42
dcl_function_body fb43
dcl_function_body fb44
dcl_function_body fb45
dcl_function_body fb46
dcl_function_body fb47
dcl_function_body fb48
dcl_function_body fb49
dcl_function_body fb50
dcl_function_body fb51
dcl_function_table ft0 = {fb0, fb13, fb26, fb39}
dcl_function_table ft1 = {fb1, fb14, fb27, fb40}
dcl_function_table ft2 = {fb2, fb15, fb28, fb41}
dcl_function_table ft3 = {fb3, fb16, fb29, fb42}
dcl_function_table ft4 = {fb4, fb17, fb30, fb43}
dcl_function_table ft5 = {fb5, fb18, fb31, fb44}
dcl_function_table ft6 = {fb6, fb19, fb32, fb45}
dcl_function_table ft7 = {fb7}
dcl_function_table ft8 = {fb8}
dcl_function_table ft9 = {fb9}
dcl_function_table ft10 = {fb10}
dcl_function_table ft11 = {fb11}
dcl_function_table ft12 = {fb12}
dcl_function_table ft13 = {fb20, fb33}
dcl_function_table ft14 = {fb21, fb34}
dcl_function_table ft15 = {fb22, fb35}
dcl_function_table ft16 = {fb23, fb36}
dcl_function_table ft17 = {fb24, fb37}
dcl_function_table ft18 = {fb25, fb38}
dcl_function_table ft19 = {fb46}
dcl_function_table ft20 = {fb47}
dcl_function_table ft21 = {fb48}
dcl_function_table ft22 = {fb49}
dcl_function_table ft23 = {fb50}
dcl_function_table ft24 = {fb51}
dcl_interface fp0[1][4] = {ft0, ft1, ft2, ft3, ft4, ft5, ft6}
dcl_interface fp1[1][1] = {ft7, ft8, ft9, ft10, ft11, ft12}
dcl_interface fp2[1][2] = {ft13, ft14, ft15, ft16, ft17, ft18}
dcl_interface fp3[1][1] = {ft19, ft20, ft21, ft22, ft23, ft24}
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_temps 8
fcall fp0[0][0]
fcall fp1[0][0]
fcall fp0[0][1]
fcall fp2[0][0]
mul r2.xyz, r2.xyzx, r3.xyzx
fcall fp0[0][2]
fcall fp2[0][1]
fcall fp0[0][3]
fcall fp3[0][0]
add r3.xyz, r3.xyzx, r4.xyzx
mad r0.xyz, r0.xyzx, r1.xyzx, r2.xyzx
add_sat o0.xyz, r3.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret 
label fb0
mov r0.xyz, l(1.000000,1.000000,1.000000,0)
ret 
label fb1
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t0.xyzw, s0
mov r0.w, this[0].y
mov r1.w, this[0].x
mul r0.xyz, r1.xyzx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb2
mov r0.w, this[0].y
mov r1.x, this[0].x
mov r0.xyz, cb[r1.x + 0][r0.w + 0].xyzx
ret 
label fb3
mov r0.xyz, l(1.000000,1.000000,1.000000,0)
ret 
label fb4
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t0.xyzw, s0
mov r0.w, this[0].y
mov r1.w, this[0].x
mul r0.xyz, r1.xyzx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb5
mov r0.w, this[0].y
mov r1.x, this[0].x
mov r0.xyz, cb[r1.x + 0][r0.w + 0].xyzx
ret 
label fb6
mov r0.w, this[0].y
mov r1.x, this[0].x
mov r0.xyz, cb[r1.x + 0][r0.w + 0].xyzx
ret 
label fb7
mov r0.w, this[1].y
mov r1.w, this[1].x
and r2.x, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r1.xyz, r2.xxxx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb8
mov r0.w, this[1].y
mov r1.w, this[1].x
and r2.x, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r1.xyz, r2.xxxx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb9
mov r0.w, this[1].y
mov r1.w, this[1].x
and r2.x, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r1.xyz, r2.xxxx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb10
mov r0.w, this[1].y
mov r1.w, this[1].x
and r2.x, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r1.xyz, r2.xxxx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb11
mov r0.w, this[1].y
mov r1.w, this[1].x
dp3 r2.x, v1.xyzx, cb[r1.w + 0][r0.w + 2].xyzx
add r2.x, r2.x, l(1.000000)
mul r2.x, r2.x, l(0.500000)
add r2.yzw, -cb[r1.w + 0][r0.w + 1].xxyz, cb[r1.w + 0][r0.w + 0].xxyz
mad r2.xyz, r2.xxxx, r2.yzwy, cb[r1.w + 0][r0.w + 1].xyzx
and r0.w, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r1.xyz, r0.wwww, r2.xyzx
ret 
label fb12
mov r0.w, this[1].y
mov r1.w, this[1].x
and r2.x, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r1.xyz, r2.xxxx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb13
mov r2.xyz, l(1.000000,1.000000,1.000000,0)
ret 
label fb14
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t0.xyzw, s0
mov r0.w, this[0].y
mov r1.w, this[0].x
mul r2.xyz, r3.xyzx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb15
mov r0.w, this[0].y
mov r1.w, this[0].x
mov r2.xyz, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb16
mov r2.xyz, l(1.000000,1.000000,1.000000,0)
ret 
label fb17
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v2.xyxx, t0.xyzw, s0
mov r0.w, this[0].y
mov r1.w, this[0].x
mul r2.xyz, r3.xyzx, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb18
mov r0.w, this[0].y
mov r1.w, this[0].x
mov r2.xyz, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb19
mov r0.w, this[0].y
mov r1.w, this[0].x
mov r2.xyz, cb[r1.w + 0][r0.w + 0].xyzx
ret 
label fb20
mov r3.xyz, l(0,0,0,0)
ret 
label fb21
mov r3.xyz, l(0,0,0,0)
ret 
label fb22
mov r3.xyz, l(0,0,0,0)
ret 
label fb23
mov r0.w, this[2].y
mov r1.w, this[2].x
dp3_sat r2.w, v1.xyzx, cb[r1.w + 0][r0.w + 1].xyzx
mul r4.xyz, r2.wwww, cb[r1.w + 0][r0.w + 0].xyzx
and r0.w, l(0x3f800000), cb[r1.w + 0][r0.w + 0].w
mul r3.xyz, r0.wwww, r4.xyzx
ret 
label fb24
mov r3.xyz, l(0,0,0,0)
ret 
label fb25
mov r3.xyz, l(0,0,0,0)
ret 
label fb26
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb27
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb28
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb29
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb30
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb31
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb32
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb33
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, v1.xyzx
dp4 r1.w, cb0[7].xyzw, cb0[7].xyzw
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, cb0[7].xyzx
dp3 r1.w, r5.xyzx, r4.xyzx
add r1.w, r1.w, r1.w
mad r6.xyz, r4.xyzx, -r1.wwww, r5.xyzx
dp3 r1.w, -r5.xyzx, r4.xyzx
add r1.w, -r1.w, l(1.000000)
mul r2.w, r1.w, r1.w
mul r1.w, r1.w, r2.w
sample_indexable(texturecube)(float,float,float,float) r4.xyz, r6.xyzx, t2.xyzw, s0
mul r4.xyz, r1.wwww, r4.xyzx
mov r1.w, this[2].y
mov r2.w, this[2].x
and r1.w, l(0x3f800000), cb[r2.w + 0][r1.w + 0].w
mul r3.xyz, r1.wwww, r4.xyzx
ret 
label fb34
mov r3.xyz, l(0,0,0,0)
ret 
label fb35
mov r3.xyz, l(0,0,0,0)
ret 
label fb36
dp4 r1.w, cb0[7].xyzw, cb0[7].xyzw
rsq r1.w, r1.w
mov r2.w, this[2].y
mov r3.w, this[2].x
mad r4.xyz, -cb0[7].xyzx, r1.wwww, cb[r3.w + 0][r2.w + 1].xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, v1.xyzx
dp3 r1.w, r4.xyzx, r5.xyzx
max r1.w, r1.w, l(0.000000)
itof r0.w, r0.w
log r1.w, r1.w
mul r0.w, r0.w, r1.w
exp r0.w, r0.w
mul r4.xyz, r0.wwww, cb[r3.w + 0][r2.w + 0].xyzx
and r0.w, l(0x3f800000), cb[r3.w + 0][r2.w + 0].w
mul r3.xyz, r0.wwww, r4.xyzx
ret 
label fb37
mov r3.xyz, l(0,0,0,0)
ret 
label fb38
mov r3.xyz, l(0,0,0,0)
ret 
label fb39
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb40
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb41
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb42
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb43
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb44
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb45
mov r1.w, this[0].y
mov r2.w, this[0].x
mov r0.w, cb[r2.w + 0][r1.w + 0].w
ret 
label fb46
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, v1.xyzx
dp4 r1.w, cb0[7].xyzw, cb0[7].xyzw
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, cb0[7].xyzx
dp3 r1.w, r6.xyzx, r5.xyzx
add r1.w, r1.w, r1.w
mad r7.xyz, r5.xyzx, -r1.wwww, r6.xyzx
dp3 r1.w, -r6.xyzx, r5.xyzx
add r1.w, -r1.w, l(1.000000)
mul r2.w, r1.w, r1.w
mul r1.w, r1.w, r2.w
sample_indexable(texturecube)(float,float,float,float) r5.xyz, r7.xyzx, t2.xyzw, s0
mul r5.xyz, r1.wwww, r5.xyzx
mov r1.w, this[3].y
mov r2.w, this[3].x
and r1.w, l(0x3f800000), cb[r2.w + 0][r1.w + 0].w
mul r4.xyz, r1.wwww, r5.xyzx
ret 
label fb47
mov r4.xyz, l(0,0,0,0)
ret 
label fb48
mov r4.xyz, l(0,0,0,0)
ret 
label fb49
dp4 r1.w, cb0[7].xyzw, cb0[7].xyzw
rsq r1.w, r1.w
mov r2.w, this[3].y
mov r3.w, this[3].x
mad r5.xyz, -cb0[7].xyzx, r1.wwww, cb[r3.w + 0][r2.w + 1].xyzx
dp3 r1.w, r5.xyzx, r5.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, r5.xyzx
dp3 r1.w, v1.xyzx, v1.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, v1.xyzx
dp3 r1.w, r5.xyzx, r6.xyzx
max r1.w, r1.w, l(0.000000)
itof r0.w, r0.w
log r1.w, r1.w
mul r0.w, r0.w, r1.w
exp r0.w, r0.w
mul r5.xyz, r0.wwww, cb[r3.w + 0][r2.w + 0].xyzx
and r0.w, l(0x3f800000), cb[r3.w + 0][r2.w + 0].w
mul r4.xyz, r0.wwww, r5.xyzx
ret 
label fb50
mov r4.xyz, l(0,0,0,0)
ret 
label fb51
mov r4.xyz, l(0,0,0,0)
ret 
// Approximately 272 instruction slots used
